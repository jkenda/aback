include "core/stack.ab"
include "core/math.ab"

macro $INT_BUFSIZ$ is 64 end
mem $int_buf$ char $INT_BUFSIZ$ end
var $int_len$ int end

macro $puti$
    int int ->
is
take radix n in
    := $int_len$ $INT_BUFSIZ$ ;

    if < n 0 then
        putc '-' ;
        - 0 n
    else n end ;

    take n in
        := $int_len$ - $int_len$ 1 ;
        / n radix ;

        + '0' % n radix ;
        := [] $int_buf$ $int_len$ ;
    end

    while > over 0 do
        take n in
            := $int_len$ - $int_len$ 1 ;
            / n radix ;

            + '0' % n radix ;
            := [] $int_buf$ $int_len$ ;
        end
    end drop ;

    puts
        + $int_buf$ $int_len$
        - $INT_BUFSIZ$ $int_len$
end end

macro puti is $puti$ 10 end
macro putib is puts "0b" ; $puti$ 2 end
macro putix is puts "0x" ; $puti$ 16 end

macro $FLOAT_PREC$ is 6 end

(print float)
macro putf
    float ->
is
    (if negative then print 0 and negate)
    if < over 0. then
        putc '-'
        -. 0.
    end ;

    (get the whole and the decimal part)
    ftoi dup ;                 (whole float --)
    -. swap itof over over ;   (dec whole float --)
    drop -rot ;                (dec whole --)

    (print the whole part)
    puti swap ; (dec --)
    putc '.'  ; (dec --)

    (print the decimal part)
    take dec in
        (if the decimal part is non-zero then print it)
        if /= dec 0. then
            (dec *= 10^$float_prec$)
            ftoi *. itof ** 10 $FLOAT_PREC$ dec
            (remove trailing zeros)
            while = 0 % over 10 do
                take dec in
                    / dec 10
                end
            end
            puti
        end
    end
end

(print boolean values
 as "true" or "false")
macro putb
    bool ->
is
take b in
    puts
        if b then "true"
        else "false" end
end end
